/**
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31− 1]。
如果数值超过这个范围，返回  INT_MAX (2^31− 1) 或 INT_MIN (−2^31) 。

示例1:
输入: "42"
输出: 42

示例2:
输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。

示例3:
输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。

示例4:
输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。

示例5:
输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 因此返回 INT_MIN (−231) 。
*/
/**
可以继续采用第7题中将整数看作栈的思想

搜寻的状态有：0-寻找开始位，1-已找到符号，2-正在转换中，30-结束输出0，31-结束输出已有数字
从左到右判断的标准是，
0:
- 如果是空格，继续向右找 -> 0
- 如果是非空、非数字、非符合字符，返回当前已有->30
- 如果是符号、数字
	- 数字，判断是否越界，如没有则继续进栈->2
	- 符号，记录符号，同时后面不能再有符号->1
1:
- 如果是空格，继续向右找 -> 30
- 如果是非空、非数字、非符合字符，返回当前已有->31
- 如果是符号、数字
	- 数字，判断是否越界，如没有则继续进栈->2
	- 符号，记录符号，同时后面不能再有符号->30
2:
- 如果是空格，继续向右找 -> 31
- 如果是非空、非数字、非符合字符，返回当前已有->31
- 如果是符号、数字
	- 数字，判断是否越界，如没有则继续进栈->2
	- 符号，记录符号，同时后面不能再有符号->31
可见有区别的是状态为 0 vs (1, 2) 时对符号和空格的处理。

corner case 字符串为空或全部空格，返回 0
*/

#include <iostream>
#include <string>

using namespace std;

class Solution {
public:
    int myAtoi(string str) {
		int y = 0;
		int s = 1;
		bool start_flag = false;
		for (size_t i = 0; i < str.size(); ++i) {
			if (isdigit(str[i])) {
				int z = (str[i] - '0') * s;
				if (y > INT_MAX / 10 || (y == INT_MAX / 10 && z > 7)) {
					return INT_MAX;
				}
				if (y < INT_MIN / 10 || (y == INT_MIN / 10 && z < -8)) {
					return INT_MIN;
				}
				y = y * 10 + z;
				start_flag = true;
			} else if (str[i] == '+' || str[i] == '-') {
				if (start_flag) {
					return y;
				}
				if (str[i] == '-') {
					s = -1;
				}
				start_flag = true;
			} else if (str[i] == ' ') {
				if (start_flag) {
					return y;
				}
			} else {
				return y;
			}
		}
        return y;
    }
};

int main() {
	// string s = "42";
	// string s = "   -42";
	// string s = "4193 with words";
	// string s = "words and 987";
	// string s = "-91283472332";
	string s = " +0 123";
	Solution solution;
	int res = solution.myAtoi(s);
	cout << res << endl;
	return 0;
}



